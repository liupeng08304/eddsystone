<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\eddsytone.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\eddsytone.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Oct 14 15:12:07 2017
<BR><P>
<H3>Maximum Stack Usage =       2368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
es_gatts_handle_write &rArr; es_gatts_write_handle_unlocked_write &rArr; es_slot_on_write &rArr; configure_eid_slot &rArr; es_security_client_pub_ecdh_receive &rArr; es_beacon_ecdh_pair_generate &rArr; occ_curve25519_scalarmult_base &rArr; occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[251]">occ_bigint_add128</a>
 <LI><a href="#[252]">occ_bigint_add256</a>
 <LI><a href="#[253]">occ_bigint_sub256</a>
 <LI><a href="#[254]">occ_bigint_cadd256</a>
 <LI><a href="#[255]">occ_bigint_csub256</a>
 <LI><a href="#[64]">occ_bigint_cswap256</a>
 <LI><a href="#[256]">occ_bigint_mul128</a>
 <LI><a href="#[257]">occ_bigint_sqr256</a>
 <LI><a href="#[258]">occ_bigint_mul256</a>
 <LI><a href="#[72]">occ_mod25519_add</a>
 <LI><a href="#[73]">occ_mod25519_sub</a>
 <LI><a href="#[6e]">occ_mod25519_square</a>
 <LI><a href="#[74]">occ_mod25519_mul</a>
 <LI><a href="#[75]">occ_mod25519_mul121666</a>
 <LI><a href="#[7e]">occ_mod25519_freeze</a>
 <LI><a href="#[65]">cswap64</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[1c3]">queue_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c3]">queue_process</a><BR>
 <LI><a href="#[5d]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20d]">queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">SAADC_IRQHandler</a> from nrf_drv_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[19]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">UARTE0_UART0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[35]">adv_evt_handler</a> from nrf_ble_es.o(i.adv_evt_handler) referenced from nrf_ble_es.o(i.adv_init)
 <LI><a href="#[43]">adv_interval_timeout</a> from es_adv_timing.o(i.adv_interval_timeout) referenced from es_adv_timing.o(i.es_adv_timing_timers_init)
 <LI><a href="#[44]">adv_slot_timeout</a> from es_adv_timing.o(i.adv_slot_timeout) referenced from es_adv_timing.o(i.es_adv_timing_timers_init)
 <LI><a href="#[42]">adv_timing_callback</a> from es_adv.o(i.adv_timing_callback) referenced from es_adv.o(i.es_adv_init)
 <LI><a href="#[3d]">alert_timer_handler</a> from bsp.o(i.alert_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[4c]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[55]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[56]">ble_evt_handler</a> from main.o(i.ble_evt_handler) referenced 2 times from main.o(sdh_ble_observers1)
 <LI><a href="#[5a]">ble_evt_handler</a> from ble_conn_params.o(i.ble_evt_handler) referenced from ble_conn_params.o(sdh_ble_observers2)
 <LI><a href="#[4e]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[1]">button_evt_handler</a> from main.o(i.button_evt_handler) referenced 2 times from main.o(.data)
 <LI><a href="#[3b]">button_timer_handler</a> from bsp.o(i.button_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[48]">cf_aes_decrypt</a> from cifra_eax_aes.o(i.cf_aes_decrypt) referenced from cifra_eax_aes.o(.constdata)
 <LI><a href="#[48]">cf_aes_decrypt</a> from cifra_eax_aes.o(i.cf_aes_decrypt) referenced from es_security.o(i.es_security_tlm_to_etlm)
 <LI><a href="#[47]">cf_aes_encrypt</a> from cifra_eax_aes.o(i.cf_aes_encrypt) referenced from cifra_eax_aes.o(.constdata)
 <LI><a href="#[47]">cf_aes_encrypt</a> from cifra_eax_aes.o(i.cf_aes_encrypt) referenced from es_security.o(i.es_security_tlm_to_etlm)
 <LI><a href="#[3e]">cmac_process</a> from cmac.o(i.cmac_process) referenced from cmac.o(i.cf_cmac_stream_update)
 <LI><a href="#[3f]">cmac_process_final_nopad</a> from cmac.o(i.cmac_process_final_nopad) referenced from cmac.o(i.cf_cmac_stream_update)
 <LI><a href="#[40]">cmac_process_final_pad</a> from cmac.o(i.cmac_process_final_pad) referenced from cmac.o(i.cf_cmac_stream_update)
 <LI><a href="#[41]">ctr_next_block</a> from modes.o(i.ctr_next_block) referenced from modes.o(i.cf_ctr_cipher)
 <LI><a href="#[37]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[53]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[3a]">es_gatts_handle_read</a> from es_gatts.o(i.es_gatts_handle_read) referenced from nrf_ble_es.o(i.ble_escs_init)
 <LI><a href="#[39]">es_gatts_handle_write</a> from es_gatts.o(i.es_gatts_handle_write) referenced from nrf_ble_es.o(i.ble_escs_init)
 <LI><a href="#[46]">fds_cb</a> from es_flash.o(i.fds_cb) referenced from es_flash.o(i.es_flash_init)
 <LI><a href="#[49]">fds_gc_event</a> from es_flash.o(i.fds_gc_event) referenced from es_flash.o(i.fds_cb)
 <LI><a href="#[2]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[36]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[4f]">init</a> from nrf_fstorage_sd.o(i.init) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[54]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[3c]">leds_timer_handler</a> from bsp.o(i.leds_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[32]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[58]">nrf_ble_es_on_ble_evt</a> from nrf_ble_es.o(i.nrf_ble_es_on_ble_evt) referenced from nrf_ble_es.o(sdh_ble_observers1)
 <LI><a href="#[4b]">nrf_ble_escs_security_cb</a> from nrf_ble_es.o(i.nrf_ble_escs_security_cb) referenced from nrf_ble_es.o(i.nrf_ble_es_init)
 <LI><a href="#[59]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[5b]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[61]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[5d]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[5e]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[5f]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[4a]">on_es_evt</a> from main.o(i.on_es_evt) referenced from main.o(i.main)
 <LI><a href="#[51]">read</a> from nrf_fstorage_sd.o(i.read) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[45]">saadc_event_handler</a> from es_battery_voltage_saadc.o(i.saadc_event_handler) referenced from es_battery_voltage_saadc.o(i.es_battery_voltage_init)
 <LI><a href="#[60]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[5c]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[4d]">timeout_handler_scheduled_exec</a> from app_timer.o(i.timeout_handler_scheduled_exec) referenced from app_timer.o(i.timeout_handler_exec)
 <LI><a href="#[50]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[38]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[52]">write</a> from nrf_fstorage_sd.o(i.write) referenced from nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[24b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[62]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[24d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[24e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[24f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[250]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>occ_bigint_add128</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>occ_bigint_add256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>occ_bigint_sub256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>occ_bigint_cadd256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>occ_bigint_csub256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>occ_bigint_cswap256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswap64
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>

<P><STRONG><a name="[256]"></a>occ_bigint_mul128</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>occ_bigint_sqr256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>occ_bigint_mul256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>occ_mod25519_add</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_mod25519_base.s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>

<P><STRONG><a name="[73]"></a>occ_mod25519_sub</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_mod25519_base.s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>

<P><STRONG><a name="[6e]"></a>occ_mod25519_square</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_mod25519_base.s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_power_of_2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_power
</UL>

<P><STRONG><a name="[74]"></a>occ_mod25519_mul</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_mod25519_base.s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_power
</UL>

<P><STRONG><a name="[75]"></a>occ_mod25519_mul121666</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_mod25519_base.s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>

<P><STRONG><a name="[7e]"></a>occ_mod25519_freeze</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_mod25519_base.s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_toBytes
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slot_timeout
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_interval_timeout
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_start
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_ctr_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cbc_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cbc_encrypt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_final
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_accumulate_final
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_code_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_unlock_prepare
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_etlm_update
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_encrypted_eid_id_key_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_slot
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_pub_ecdh_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_plain_eid_id_key_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_encrypted_eid_id_key_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_eid_slots_restore
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slots_init
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_set
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slots_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slots_init
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_acc_byte
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configured_slots_on_clear_update
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_clean
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_init
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_long_write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_ctr_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_compute_n
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_gattdb
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_adv_data
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_adv_start
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_clear_slot
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_eid_slot_destroy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_escs_init
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1c5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[199]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_unlock_verify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[25d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[25e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[25f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>occ_curve25519_scalarmult</STRONG> (Thumb, 378 bytes, Stack size 1152 bytes, occ_lib_occ_curve25519.c.o(.text.occ_curve25519_scalarmult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_toBytes
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_power
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_mul121666
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_square
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_mul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_sub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_add
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_bigint_cswap256
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_fromBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult_base
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
</UL>

<P><STRONG><a name="[78]"></a>occ_curve25519_scalarmult_base</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, occ_lib_occ_curve25519.c.o(.text.occ_curve25519_scalarmult_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = occ_curve25519_scalarmult_base &rArr; occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_beacon_ecdh_pair_generate
</UL>

<P><STRONG><a name="[79]"></a>occ_hmac_sha256</STRONG> (Thumb, 18 bytes, Stack size 64 bytes, occ_lib_occ_hkdf_sha256.c.o(.text.occ_hmac_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = occ_hmac_sha256 &rArr; occ_hmac_sha256_num &rArr; occ_sha256_final &rArr; sha256_blocks &rArr; occ_sha256_loop1
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_hmac_sha256_num
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
</UL>

<P><STRONG><a name="[70]"></a>occ_mod25519_fromBytes</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, occ_lib_occ_mod25519.c.o(.text.occ_mod25519_fromBytes))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>

<P><STRONG><a name="[71]"></a>occ_mod25519_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, occ_lib_occ_mod25519.c.o(.text.occ_mod25519_init))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>

<P><STRONG><a name="[76]"></a>occ_mod25519_power</STRONG> (Thumb, 256 bytes, Stack size 576 bytes, occ_lib_occ_mod25519.c.o(.text.occ_mod25519_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_power_of_2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_square
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>

<P><STRONG><a name="[77]"></a>occ_mod25519_toBytes</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, occ_lib_occ_mod25519.c.o(.text.occ_mod25519_toBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = occ_mod25519_toBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_freeze
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
</UL>

<P><STRONG><a name="[7d]"></a>occ_sha256_final</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, occ_lib_occ_sha256.c.o(.text.occ_sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = occ_sha256_final &rArr; sha256_blocks &rArr; occ_sha256_loop1
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_hmac_sha256_num
</UL>

<P><STRONG><a name="[7b]"></a>occ_sha256_init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, occ_lib_occ_sha256.c.o(.text.occ_sha256_init))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_hmac_sha256_num
</UL>

<P><STRONG><a name="[80]"></a>occ_sha256_loop1</STRONG> (Thumb, 166 bytes, Stack size 192 bytes, occ_lib_occ_sha256_loop.c.o(.text.occ_sha256_loop1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = occ_sha256_loop1
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_blocks
</UL>

<P><STRONG><a name="[81]"></a>occ_sha256_loop2</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, occ_lib_occ_sha256_loop.c.o(.text.occ_sha256_loop2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = occ_sha256_loop2
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_blocks
</UL>

<P><STRONG><a name="[7c]"></a>occ_sha256_update</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, occ_lib_occ_sha256.c.o(.text.occ_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = occ_sha256_update &rArr; sha256_blocks &rArr; occ_sha256_loop1
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_hmac_sha256_num
</UL>

<P><STRONG><a name="[82]"></a>AES128_ECB_decrypt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, aes.o(i.AES128_ECB_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AES128_ECB_decrypt &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_lock_code_update
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_shared_ik_receive
</UL>

<P><STRONG><a name="[86]"></a>AES128_ECB_encrypt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, aes.o(i.AES128_ECB_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_key_generate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eid_generate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_unlock_prepare
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_encrypted_eid_id_key_get
</UL>

<P><STRONG><a name="[13]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_sched_event_put &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SAADC_IRQHandler</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, nrf_drv_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[33]"></a>SystemInit</STRONG> (Thumb, 556 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_12
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[262]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[263]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[264]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d9]"></a>app_button_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[db]"></a>app_button_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[4c]"></a>app_error_fault_handler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[bd]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_long_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_scheduled_exec
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_code_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_on_write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_read
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_cb
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slot_timeout
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_interval_timeout
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_adv_data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_timers_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_start
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_callback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_stop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_start
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slots_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ranging_data_for_slot
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slot_from_flash
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_eid_slot
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_check
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_on_ble_evt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_security_cb
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_address_set
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_escs_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
</UL>

<P><STRONG><a name="[e0]"></a>app_sched_event_put</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_sched_event_put &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_cb
</UL>

<P><STRONG><a name="[e4]"></a>app_sched_execute</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_sched_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[238]"></a>app_sched_init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
</UL>

<P><STRONG><a name="[e5]"></a>app_timer_cnt_diff_compute</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_cnt_diff_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_cnt_diff_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_check
</UL>

<P><STRONG><a name="[e7]"></a>app_timer_cnt_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_cnt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_check
</UL>

<P><STRONG><a name="[df]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_timers_init
</UL>

<P><STRONG><a name="[e9]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[c0]"></a>app_timer_start</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slot_timeout
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_interval_timeout
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_start
</UL>

<P><STRONG><a name="[f0]"></a>app_timer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[e1]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[e3]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[f6]"></a>ble_advdata_encode</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[ff]"></a>ble_advdata_set</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_adv_data
</UL>

<P><STRONG><a name="[102]"></a>ble_conn_params_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[111]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[d8]"></a>bsp_board_led_invert</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_timer_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_es_evt
</UL>

<P><STRONG><a name="[107]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[106]"></a>bsp_board_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_es_evt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[120]"></a>bsp_board_led_state_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[118]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_board_leds_init &rArr; bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[11a]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[11b]"></a>bsp_board_leds_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_on &rArr; bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[11c]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[d4]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[11d]"></a>bsp_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bsp_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
</UL>

<P><STRONG><a name="[48]"></a>cf_aes_decrypt</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, cifra_eax_aes.o(i.cf_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cf_aes_decrypt &rArr; inv_sub_block &rArr; sub_word &rArr; select_u8x4 &rArr; mask_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write32_be
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read32_be
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sub_block
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_shift_rows
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_columns
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cifra_eax_aes.o(.constdata)
<LI> es_security.o(i.es_security_tlm_to_etlm)
</UL>
<P><STRONG><a name="[47]"></a>cf_aes_encrypt</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, cifra_eax_aes.o(i.cf_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cf_aes_encrypt &rArr; sub_block &rArr; sub_word &rArr; select_u8x4 &rArr; mask_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write32_be
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_block
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_rows
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read32_be
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_columns
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cifra_eax_aes.o(.constdata)
<LI> es_security.o(i.es_security_tlm_to_etlm)
</UL>
<P><STRONG><a name="[12b]"></a>cf_aes_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cifra_eax_aes.o(i.cf_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cf_aes_init &rArr; aes_schedule &rArr; sub_word &rArr; select_u8x4 &rArr; mask_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_schedule
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_tlm_to_etlm
</UL>

<P><STRONG><a name="[12c]"></a>cf_blockwise_acc_byte</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, blockwise.o(i.cf_blockwise_acc_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cf_blockwise_acc_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_acc_pad
</UL>

<P><STRONG><a name="[12d]"></a>cf_blockwise_acc_pad</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, blockwise.o(i.cf_blockwise_acc_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_accumulate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_acc_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_update
</UL>

<P><STRONG><a name="[12e]"></a>cf_blockwise_accumulate</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, blockwise.o(i.cf_blockwise_accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_accumulate_final
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_acc_pad
</UL>

<P><STRONG><a name="[12f]"></a>cf_blockwise_accumulate_final</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, blockwise.o(i.cf_blockwise_accumulate_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_update
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_accumulate
</UL>

<P><STRONG><a name="[13d]"></a>cf_blockwise_xor</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, blockwise.o(i.cf_blockwise_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cf_blockwise_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_ctr_cipher
</UL>

<P><STRONG><a name="[130]"></a>cf_cbc_encrypt</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, modes.o(i.cf_cbc_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cf_cbc_encrypt &rArr; xor_bb
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_bb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_process_final
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_process
</UL>

<P><STRONG><a name="[132]"></a>cf_cbc_init</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, modes.o(i.cf_cbc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cf_cbc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_reset
</UL>

<P><STRONG><a name="[133]"></a>cf_cmac_init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, cmac.o(i.cf_cmac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cf_cmac_init &rArr; cf_gf128_double &rArr; select_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_gf128_tobytes_be
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_gf128_frombytes_be
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_gf128_double
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_init
</UL>

<P><STRONG><a name="[138]"></a>cf_cmac_stream_final</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmac.o(i.cf_cmac_stream_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cf_cmac_stream_final
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_compute_n
</UL>

<P><STRONG><a name="[139]"></a>cf_cmac_stream_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmac.o(i.cf_cmac_stream_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cf_cmac_stream_init &rArr; cf_cmac_init &rArr; cf_gf128_double &rArr; select_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_reset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_eax_encrypt
</UL>

<P><STRONG><a name="[13a]"></a>cf_cmac_stream_reset</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cmac.o(i.cf_cmac_stream_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cf_cmac_stream_reset &rArr; cf_cbc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cbc_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_compute_n
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_init
</UL>

<P><STRONG><a name="[13b]"></a>cf_cmac_stream_update</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, cmac.o(i.cf_cmac_stream_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_accumulate_final
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_acc_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_compute_n
</UL>

<P><STRONG><a name="[13c]"></a>cf_ctr_cipher</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, modes.o(i.cf_ctr_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cf_ctr_cipher &rArr; cf_blockwise_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_blockwise_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_eax_encrypt
</UL>

<P><STRONG><a name="[13e]"></a>cf_ctr_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, modes.o(i.cf_ctr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cf_ctr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_eax_encrypt
</UL>

<P><STRONG><a name="[13f]"></a>cf_eax_encrypt</STRONG> (Thumb, 156 bytes, Stack size 232 bytes, eax.o(i.cf_eax_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = cf_eax_encrypt &rArr; cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_ctr_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_ctr_cipher
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_compute_n
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_tlm_to_etlm
</UL>

<P><STRONG><a name="[136]"></a>cf_gf128_double</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gf128.o(i.cf_gf128_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cf_gf128_double &rArr; select_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_init
</UL>

<P><STRONG><a name="[135]"></a>cf_gf128_frombytes_be</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gf128.o(i.cf_gf128_frombytes_be))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cf_gf128_frombytes_be
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read32_be
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_init
</UL>

<P><STRONG><a name="[137]"></a>cf_gf128_tobytes_be</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gf128.o(i.cf_gf128_tobytes_be))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cf_gf128_tobytes_be
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write32_be
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_init
</UL>

<P><STRONG><a name="[15f]"></a>es_adv_frame_fill_connectable_adv_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, es_adv_frame.o(i.es_adv_frame_fill_connectable_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_adv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_adv_start
</UL>

<P><STRONG><a name="[ce]"></a>es_adv_frame_fill_non_connectable_adv_data</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, es_adv_frame.o(i.es_adv_frame_fill_non_connectable_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = es_adv_frame_fill_non_connectable_adv_data &rArr; es_slot_etlm_update &rArr; es_security_tlm_to_etlm &rArr; cf_eax_encrypt &rArr; cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_tlm_update
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_etlm_update
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_adv_data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_callback
</UL>

<P><STRONG><a name="[be]"></a>es_adv_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, es_adv.o(i.es_adv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = es_adv_init &rArr; es_tlm_init &rArr; update_time &rArr; es_stopwatch_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_init
</UL>

<P><STRONG><a name="[18e]"></a>es_adv_interval_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_adv.o(i.es_adv_interval_get))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlocked_read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[16b]"></a>es_adv_interval_set</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, es_adv.o(i.es_adv_interval_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = es_adv_interval_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
</UL>

<P><STRONG><a name="[16c]"></a>es_adv_on_ble_evt</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, es_adv.o(i.es_adv_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = es_adv_on_ble_evt &rArr; adv_restart &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_non_connctable_adv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_stop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_on_ble_evt
</UL>

<P><STRONG><a name="[1eb]"></a>es_adv_remain_connectable_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_adv.o(i.es_adv_remain_connectable_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_address_set
</UL>

<P><STRONG><a name="[198]"></a>es_adv_remain_connectable_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_adv.o(i.es_adv_remain_connectable_set))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
</UL>

<P><STRONG><a name="[16d]"></a>es_adv_start_connectable_adv</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, es_adv.o(i.es_adv_start_connectable_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = es_adv_start_connectable_adv &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_adv_start
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_on_start_connectable_advertising
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_address_set
</UL>

<P><STRONG><a name="[c2]"></a>es_adv_start_non_connctable_adv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, es_adv.o(i.es_adv_start_non_connctable_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = es_adv_start_non_connctable_adv &rArr; es_adv_timing_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_on_ble_evt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_restart
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_address_set
</UL>

<P><STRONG><a name="[16f]"></a>es_adv_timers_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, es_adv.o(i.es_adv_timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = es_adv_timers_init &rArr; es_adv_timing_timers_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_timers_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[16a]"></a>es_adv_timing_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, es_adv_timing.o(i.es_adv_timing_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = es_adv_timing_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_init
</UL>

<P><STRONG><a name="[d2]"></a>es_adv_timing_resolve</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, es_adv_timing_resolver.o(i.es_adv_timing_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = es_adv_timing_resolve &rArr; is_eid
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_eid
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_set
</UL>

<P><STRONG><a name="[16e]"></a>es_adv_timing_start</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, es_adv_timing.o(i.es_adv_timing_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = es_adv_timing_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_non_connctable_adv
</UL>

<P><STRONG><a name="[cd]"></a>es_adv_timing_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, es_adv_timing.o(i.es_adv_timing_stop))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_stop
</UL>

<P><STRONG><a name="[170]"></a>es_adv_timing_timers_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, es_adv_timing.o(i.es_adv_timing_timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = es_adv_timing_timers_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timers_init
</UL>

<P><STRONG><a name="[173]"></a>es_battery_voltage_get</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, es_battery_voltage_saadc.o(i.es_battery_voltage_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = es_battery_voltage_get &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_is_busy
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_vbatt
</UL>

<P><STRONG><a name="[177]"></a>es_battery_voltage_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, es_battery_voltage_saadc.o(i.es_battery_voltage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = es_battery_voltage_init &rArr; nrf_drv_saadc_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[bc]"></a>es_flash_access_beacon_config</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, es_flash.o(i.es_flash_access_beacon_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = es_flash_access_beacon_config &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_init
</UL>

<P><STRONG><a name="[17b]"></a>es_flash_access_flags</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, es_flash.o(i.es_flash_access_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = es_flash_access_flags &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slots_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[17c]"></a>es_flash_access_lock_key</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, es_flash.o(i.es_flash_access_lock_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = es_flash_access_lock_key &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_code_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_lock_code_update
</UL>

<P><STRONG><a name="[17d]"></a>es_flash_access_slot_configs</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, es_flash.o(i.es_flash_access_slot_configs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = es_flash_access_slot_configs &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_write_to_flash
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slot_from_flash
</UL>

<P><STRONG><a name="[17e]"></a>es_flash_factory_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, es_flash.o(i.es_flash_factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = es_flash_factory_reset &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
</UL>

<P><STRONG><a name="[180]"></a>es_flash_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, es_flash.o(i.es_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = es_flash_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[1ee]"></a>es_flash_num_pending_ops</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_flash.o(i.es_flash_num_pending_ops))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[1f1]"></a>es_flash_on_ble_evt</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, es_flash.o(i.es_flash_on_ble_evt))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_on_ble_evt
</UL>

<P><STRONG><a name="[3a]"></a>es_gatts_handle_read</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, es_gatts.o(i.es_gatts_handle_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = es_gatts_handle_read &rArr; es_gatts_read_handle_unlocked_read &rArr; read_adv_slot &rArr; es_slot_etlm_update &rArr; es_security_tlm_to_etlm &rArr; cf_eax_encrypt &rArr; cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlocked_read
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlock
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_locked_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_send_op_not_permitted
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_beacon_unlocked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_ble_es.o(i.ble_escs_init)
</UL>
<P><STRONG><a name="[39]"></a>es_gatts_handle_write</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, es_gatts.o(i.es_gatts_handle_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368 + Unknown Stack Size
<LI>Call Chain = es_gatts_handle_write &rArr; es_gatts_write_handle_unlocked_write &rArr; es_slot_on_write &rArr; configure_eid_slot &rArr; es_security_client_pub_ecdh_receive &rArr; es_beacon_ecdh_pair_generate &rArr; occ_curve25519_scalarmult_base &rArr; occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_send_op_not_permitted
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_beacon_unlocked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_ble_es.o(i.ble_escs_init)
</UL>
<P><STRONG><a name="[1ed]"></a>es_gatts_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, es_gatts.o(i.es_gatts_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[187]"></a>es_gatts_read_handle_locked_read</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, es_gatts_read.o(i.es_gatts_read_handle_locked_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = es_gatts_read_handle_locked_read &rArr; read_value &rArr; send_read_reply &rArr; es_gatts_send_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_value
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_send_op_not_permitted
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_read
</UL>

<P><STRONG><a name="[186]"></a>es_gatts_read_handle_unlock</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, es_gatts_read.o(i.es_gatts_read_handle_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = es_gatts_read_handle_unlock &rArr; read_value &rArr; send_read_reply &rArr; es_gatts_send_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_unlock_prepare
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_random_challenge_generate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_read
</UL>

<P><STRONG><a name="[185]"></a>es_gatts_read_handle_unlocked_read</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, es_gatts_read.o(i.es_gatts_read_handle_unlocked_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = es_gatts_read_handle_unlocked_read &rArr; read_adv_slot &rArr; es_slot_etlm_update &rArr; es_security_tlm_to_etlm &rArr; cf_eax_encrypt &rArr; cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_value
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_gattdb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adv_slot
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_send_op_not_permitted
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_interval_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_read
</UL>

<P><STRONG><a name="[184]"></a>es_gatts_send_op_not_permitted</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, es_gatts.o(i.es_gatts_send_op_not_permitted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = es_gatts_send_op_not_permitted &rArr; es_gatts_send_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_send_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlocked_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_locked_read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_read
</UL>

<P><STRONG><a name="[190]"></a>es_gatts_send_reply</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, es_gatts.o(i.es_gatts_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = es_gatts_send_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_write_reply
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_read_reply
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_send_op_not_permitted
</UL>

<P><STRONG><a name="[189]"></a>es_gatts_write_handle_unlock</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, es_gatts_write.o(i.es_gatts_write_handle_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = es_gatts_write_handle_unlock &rArr; send_write_reply &rArr; es_gatts_send_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_unlock_verify
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_write_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_write
</UL>

<P><STRONG><a name="[188]"></a>es_gatts_write_handle_unlocked_write</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, es_gatts_write.o(i.es_gatts_write_handle_unlocked_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328 + Unknown Stack Size
<LI>Call Chain = es_gatts_write_handle_unlocked_write &rArr; es_slot_on_write &rArr; configure_eid_slot &rArr; es_security_client_pub_ecdh_receive &rArr; es_beacon_ecdh_pair_generate &rArr; occ_curve25519_scalarmult_base &rArr; occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_set_adv_custom_tx_power
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_radio_tx_pwr_set
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_on_write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_lock_code_update
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_write_reply
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length_is_valid
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_factory_reset
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_remain_connectable_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_interval_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_interval_get
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_write
</UL>

<P><STRONG><a name="[154]"></a>es_security_client_pub_ecdh_receive</STRONG> (Thumb, 292 bytes, Stack size 400 bytes, es_security.o(i.es_security_client_pub_ecdh_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216 + Unknown Stack Size
<LI>Call Chain = es_security_client_pub_ecdh_receive &rArr; es_beacon_ecdh_pair_generate &rArr; occ_curve25519_scalarmult_base &rArr; occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_key_generate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_beacon_ecdh_pair_generate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eid_generate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_hmac_sha256
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_eid_slot
</UL>

<P><STRONG><a name="[1ac]"></a>es_security_clock_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, es_security.o(i.es_security_clock_get))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adv_slot
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_write_to_flash
</UL>

<P><STRONG><a name="[1a4]"></a>es_security_eid_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, es_security.o(i.es_security_eid_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_eid_ready
</UL>

<P><STRONG><a name="[153]"></a>es_security_eid_slot_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, es_security.o(i.es_security_eid_slot_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = es_security_eid_slot_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_eid_slot
</UL>

<P><STRONG><a name="[19a]"></a>es_security_eid_slots_restore</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, es_security.o(i.es_security_eid_slots_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = es_security_eid_slots_restore &rArr; temp_key_generate &rArr; AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_key_generate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eid_generate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slot_from_flash
</UL>

<P><STRONG><a name="[19b]"></a>es_security_encrypted_eid_id_key_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, es_security.o(i.es_security_encrypted_eid_id_key_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = es_security_encrypted_eid_id_key_get &rArr; AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_security_cb
</UL>

<P><STRONG><a name="[19c]"></a>es_security_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, es_security.o(i.es_security_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = es_security_init &rArr; lock_code_init &rArr; es_flash_access_lock_key &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_code_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_create
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[195]"></a>es_security_lock_code_update</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, es_security.o(i.es_security_lock_code_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = es_security_lock_code_update &rArr; es_flash_access_lock_key &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_lock_key
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
</UL>

<P><STRONG><a name="[19f]"></a>es_security_plain_eid_id_key_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, es_security.o(i.es_security_plain_eid_id_key_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = es_security_plain_eid_id_key_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_write_to_flash
</UL>

<P><STRONG><a name="[1a0]"></a>es_security_pub_ecdh_get</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, es_security.o(i.es_security_pub_ecdh_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = es_security_pub_ecdh_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_security_cb
</UL>

<P><STRONG><a name="[18b]"></a>es_security_random_challenge_generate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, es_security.o(i.es_security_random_challenge_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = es_security_random_challenge_generate
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlock
</UL>

<P><STRONG><a name="[1ad]"></a>es_security_scaler_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, es_security.o(i.es_security_scaler_get))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adv_slot
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_write_to_flash
</UL>

<P><STRONG><a name="[155]"></a>es_security_shared_ik_receive</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, es_security.o(i.es_security_shared_ik_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = es_security_shared_ik_receive &rArr; AES128_ECB_decrypt &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_key_generate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eid_generate
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_eid_slot
</UL>

<P><STRONG><a name="[1a1]"></a>es_security_tlm_to_etlm</STRONG> (Thumb, 296 bytes, Stack size 384 bytes, es_security.o(i.es_security_tlm_to_etlm))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = es_security_tlm_to_etlm &rArr; cf_eax_encrypt &rArr; cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_eax_encrypt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_etlm_update
</UL>

<P><STRONG><a name="[18c]"></a>es_security_unlock_prepare</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, es_security.o(i.es_security_unlock_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = es_security_unlock_prepare &rArr; AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlock
</UL>

<P><STRONG><a name="[191]"></a>es_security_unlock_verify</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, es_security.o(i.es_security_unlock_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = es_security_unlock_verify &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlock
</UL>

<P><STRONG><a name="[ba]"></a>es_security_update_time</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, es_security.o(i.es_security_update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = es_security_update_time &rArr; check_rollovers_and_update_eid &rArr; temp_key_generate &rArr; AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rollovers_and_update_eid
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_evt_handler
</UL>

<P><STRONG><a name="[1a3]"></a>es_slot_eid_ready</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, es_slot.o(i.es_slot_eid_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = es_slot_eid_ready &rArr; set_ranging_data_for_slot &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_update_slot_list_info_on_add
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ranging_data_for_slot
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_eid_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_security_cb
</UL>

<P><STRONG><a name="[1a5]"></a>es_slot_encrypted_eid_id_key_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, es_slot.o(i.es_slot_encrypted_eid_id_key_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = es_slot_encrypted_eid_id_key_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slot_boundary_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_security_cb
</UL>

<P><STRONG><a name="[167]"></a>es_slot_etlm_update</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, es_slot.o(i.es_slot_etlm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = es_slot_etlm_update &rArr; es_security_tlm_to_etlm &rArr; cf_eax_encrypt &rArr; cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_etlm_required
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slot_is_eid
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_tlm_to_etlm
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adv_slot
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_frame_fill_non_connectable_adv_data
</UL>

<P><STRONG><a name="[bf]"></a>es_slot_get_registry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_slot.o(i.es_slot_get_registry))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlocked_read
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_to_adv_is_tlm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_set
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_interval_timeout
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_frame_fill_non_connectable_adv_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_interval_set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_callback
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[197]"></a>es_slot_on_write</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, es_slot.o(i.es_slot_on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272 + Unknown Stack Size
<LI>Call Chain = es_slot_on_write &rArr; configure_eid_slot &rArr; es_security_client_pub_ecdh_receive &rArr; es_beacon_ecdh_pair_generate &rArr; occ_curve25519_scalarmult_base &rArr; occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_clear_slot
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slot_boundary_check
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_slot
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_eid_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
</UL>

<P><STRONG><a name="[193]"></a>es_slot_radio_tx_pwr_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, es_slot.o(i.es_slot_radio_tx_pwr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = es_slot_radio_tx_pwr_set &rArr; set_ranging_data_for_slot &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slot_boundary_check
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ranging_data_for_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
</UL>

<P><STRONG><a name="[152]"></a>es_slot_reg_clear_slot</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, es_slot_reg.o(i.es_slot_reg_clear_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = es_slot_reg_clear_slot &rArr; configured_slots_on_clear_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tlm_configured_on_clearing
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configured_slots_on_clear_update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_on_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_eid_slot
</UL>

<P><STRONG><a name="[1a7]"></a>es_slot_reg_etlm_required</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, es_slot_reg.o(i.es_slot_reg_etlm_required))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_etlm_update
</UL>

<P><STRONG><a name="[1aa]"></a>es_slot_reg_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, es_slot_reg.o(i.es_slot_reg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = es_slot_reg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slots_init
</UL>

<P><STRONG><a name="[157]"></a>es_slot_reg_update_slot_list_info_on_add</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, es_slot_reg.o(i.es_slot_reg_update_slot_list_info_on_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = es_slot_reg_update_slot_list_info_on_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slots_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_eid_ready
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slot_from_flash
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_slot
</UL>

<P><STRONG><a name="[194]"></a>es_slot_set_adv_custom_tx_power</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, es_slot.o(i.es_slot_set_adv_custom_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = es_slot_set_adv_custom_tx_power &rArr; set_ranging_data_for_slot &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slot_boundary_check
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ranging_data_for_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
</UL>

<P><STRONG><a name="[168]"></a>es_slot_tlm_update</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, es_slot.o(i.es_slot_tlm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = es_slot_tlm_update &rArr; es_tlm_tlm_get &rArr; update_time &rArr; es_stopwatch_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_frame_fill_non_connectable_adv_data
</UL>

<P><STRONG><a name="[1ab]"></a>es_slot_write_to_flash</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, es_slot.o(i.es_slot_write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = es_slot_write_to_flash &rArr; es_flash_access_slot_configs &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_scaler_get
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_clock_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_slot_configs
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_plain_eid_id_key_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_security_cb
</UL>

<P><STRONG><a name="[c9]"></a>es_slots_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, es_slot.o(i.es_slots_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = es_slots_init &rArr; load_slot_from_flash &rArr; es_flash_access_slot_configs &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_flags
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_update_slot_list_info_on_add
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slot_from_flash
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slots_init
</UL>

<P><STRONG><a name="[1a2]"></a>es_stopwatch_check</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, es_stopwatch.o(i.es_stopwatch_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = es_stopwatch_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_diff_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_update_time
</UL>

<P><STRONG><a name="[19e]"></a>es_stopwatch_create</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, es_stopwatch.o(i.es_stopwatch_create))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_init
</UL>

<P><STRONG><a name="[1ec]"></a>es_stopwatch_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, es_stopwatch.o(i.es_stopwatch_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[cb]"></a>es_tlm_adv_cnt_inc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, es_tlm.o(i.es_tlm_adv_cnt_inc))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_start
</UL>

<P><STRONG><a name="[169]"></a>es_tlm_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, es_tlm.o(i.es_tlm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = es_tlm_init &rArr; update_time &rArr; es_stopwatch_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_vbatt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_create
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_init
</UL>

<P><STRONG><a name="[159]"></a>es_tlm_tlm_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, es_tlm.o(i.es_tlm_tlm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = es_tlm_tlm_get &rArr; update_time &rArr; es_stopwatch_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_vbatt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adv_cnt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_tlm_update
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_etlm_update
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_slot
</UL>

<P><STRONG><a name="[17f]"></a>fds_file_delete</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_factory_reset
</UL>

<P><STRONG><a name="[1b7]"></a>fds_gc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fds_gc &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc_event
</UL>

<P><STRONG><a name="[182]"></a>fds_init</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bounds_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_init
</UL>

<P><STRONG><a name="[b3]"></a>fds_record_close</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>

<P><STRONG><a name="[b6]"></a>fds_record_delete</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, fds.o(i.fds_record_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fds_record_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>

<P><STRONG><a name="[b0]"></a>fds_record_find_by_key</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>

<P><STRONG><a name="[b1]"></a>fds_record_open</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>

<P><STRONG><a name="[b5]"></a>fds_record_update</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>

<P><STRONG><a name="[b4]"></a>fds_record_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_flash_data
</UL>

<P><STRONG><a name="[181]"></a>fds_register</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.fds_register))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_init
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = main &rArr; nrf_ble_es_init &rArr; adv_slots_init &rArr; es_slots_init &rArr; load_slot_from_flash &rArr; es_flash_access_slot_configs &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1e8]"></a>nrf_ble_es_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, nrf_ble_es.o(i.nrf_ble_es_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = nrf_ble_es_init &rArr; adv_slots_init &rArr; es_slots_init &rArr; load_slot_from_flash &rArr; es_flash_access_slot_configs &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_num_pending_ops
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timers_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_non_connctable_adv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_escs_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slots_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>nrf_ble_es_on_ble_evt</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrf_ble_es.o(i.nrf_ble_es_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = nrf_ble_es_on_ble_evt &rArr; on_ble_evt &rArr; check_and_update_mac_address &rArr; new_address_set &rArr; es_adv_start_connectable_adv &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_on_ble_evt
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_on_ble_evt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_on_ble_evt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_ble_es.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[121]"></a>nrf_ble_es_on_start_connectable_advertising</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_ble_es.o(i.nrf_ble_es_on_start_connectable_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = nrf_ble_es_on_start_connectable_advertising &rArr; es_adv_start_connectable_adv &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_connectable_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_evt_handler
</UL>

<P><STRONG><a name="[105]"></a>nrf_ble_escs_init</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, nrf_ble_escs.o(i.nrf_ble_escs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nrf_ble_escs_init &rArr; char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_escs_init
</UL>

<P><STRONG><a name="[1ef]"></a>nrf_ble_escs_on_ble_evt</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf_ble_escs.o(i.nrf_ble_escs_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_ble_escs_on_ble_evt &rArr; on_rw_authorize_req &rArr; on_long_write &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_on_ble_evt
</UL>

<P><STRONG><a name="[1c7]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[59]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[1fc]"></a>nrf_drv_clock_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[1fe]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[1fd]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[da]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[de]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[163]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_gpiote_in_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[dd]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[dc]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[175]"></a>nrf_drv_saadc_buffer_convert</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_get
</UL>

<P><STRONG><a name="[179]"></a>nrf_drv_saadc_channel_init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_channel_init &rArr; nrf_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_init
</UL>

<P><STRONG><a name="[178]"></a>nrf_drv_saadc_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_saadc_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_init
</UL>

<P><STRONG><a name="[174]"></a>nrf_drv_saadc_is_busy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_is_busy))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_get
</UL>

<P><STRONG><a name="[176]"></a>nrf_drv_saadc_sample</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_saadc_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_get
</UL>

<P><STRONG><a name="[1d1]"></a>nrf_fstorage_erase</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_fstorage_erase &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[1bb]"></a>nrf_fstorage_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fstorage_init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[5b]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[61]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[5d]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[1d3]"></a>nrf_fstorage_write</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_within_bounds
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[20a]"></a>nrf_saadc_channel_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nrf_saadc.o(i.nrf_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[115]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[116]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sdh_ble_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[216]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_sdh_disable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[114]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[a3]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[211]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[214]"></a>nrf_section_iter_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[215]"></a>nrf_section_iter_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[235]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
</UL>

<P><STRONG><a name="[22f]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>

<P><STRONG><a name="[236]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 66 bytes, Stack size 88 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[10f]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>ble_evt_handler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, main.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[113]"></a>ble_stack_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_stack_init &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>button_evt_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.button_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = button_evt_handler &rArr; nrf_ble_es_on_start_connectable_advertising &rArr; es_adv_start_connectable_adv &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_on_start_connectable_advertising
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[122]"></a>button_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(i.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = button_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>conn_params_init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, main.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_params_init &rArr; ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>gap_params_init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>gatt_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>leds_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = leds_init &rArr; bsp_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>on_es_evt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.on_es_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_es_evt &rArr; bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1e9]"></a>power_manage</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.power_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = power_manage &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>scheduler_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scheduler_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>timers_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timers_init &rArr; app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[117]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[3d]"></a>alert_timer_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.alert_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alert_timer_handler &rArr; bsp_board_led_invert
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[4e]"></a>bsp_button_event_handler</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>bsp_led_indication</STRONG> (Thumb, 872 bytes, Stack size 32 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_timer_handler
</UL>

<P><STRONG><a name="[3b]"></a>button_timer_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(i.button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = button_timer_handler &rArr; bsp_button_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[11f]"></a>leds_off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp.o(i.leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = leds_off &rArr; bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[3c]"></a>leds_timer_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp.o(i.leds_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = leds_timer_handler &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[d3]"></a>advertising_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[57]"></a>ble_evt_handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_evt_handler &rArr; connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_btn_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[108]"></a>connection_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.connection_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[100]"></a>advdata_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[f4]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f7]"></a>ble_device_addr_encode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[15b]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[fb]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f8]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[fc]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[fe]"></a>name_encode</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[fd]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[101]"></a>srdata_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[f9]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[f5]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[fa]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[245]"></a>uuid_list_sized_encode</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[5a]"></a>ble_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_evt_handler &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[15d]"></a>conn_params_negotiation</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[21e]"></a>instance_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[21f]"></a>is_conn_params_ok</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[10c]"></a>on_conn_params_update</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[109]"></a>on_connect</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[10a]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[10b]"></a>on_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[15e]"></a>send_error_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[23d]"></a>send_update_request</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_params.o(i.send_update_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[38]"></a>update_timeout_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_timeout_handler &rArr; send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[55]"></a>ble_evt_handler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_evt_handler &rArr; record_purge_disconnected &rArr; sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[10e]"></a>record_activate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = record_activate &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[234]"></a>record_invalidate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = record_invalidate &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[10d]"></a>record_purge_disconnected</STRONG> (Thumb, 62 bytes, Stack size 144 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = record_purge_disconnected &rArr; sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[110]"></a>record_set_disconnected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = record_set_disconnected &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[112]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[220]"></a>data_length_update</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[1f5]"></a>link_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
</UL>

<P><STRONG><a name="[1f6]"></a>on_connected_evt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_connected_evt &rArr; data_length_update
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[1fa]"></a>on_data_length_update_evt</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_data_length_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[1fb]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_data_length_update_request_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[1f7]"></a>on_disconnected_evt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_disconnected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_disconnected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[1f9]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_exchange_mtu_request_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[1f8]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_exchange_mtu_rsp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[144]"></a>char_add</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, nrf_ble_escs.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_init
</UL>

<P><STRONG><a name="[222]"></a>get_evt_type_for_handle</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, nrf_ble_escs.o(i.get_evt_type_for_handle))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_long_write
</UL>

<P><STRONG><a name="[1f2]"></a>on_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_ble_escs.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_on_ble_evt
</UL>

<P><STRONG><a name="[1f3]"></a>on_disconnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_ble_escs.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_on_ble_evt
</UL>

<P><STRONG><a name="[221]"></a>on_long_write</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, nrf_ble_escs.o(i.on_long_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_long_write &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evt_type_for_handle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>

<P><STRONG><a name="[223]"></a>on_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_ble_escs.o(i.on_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_read
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evt_type_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>

<P><STRONG><a name="[1f4]"></a>on_rw_authorize_req</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, nrf_ble_escs.o(i.on_rw_authorize_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_rw_authorize_req &rArr; on_long_write &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_read
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_long_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_on_ble_evt
</UL>

<P><STRONG><a name="[224]"></a>on_write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_ble_escs.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evt_type_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>

<P><STRONG><a name="[9c]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[1e0]"></a>lfclk_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_lf_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[99]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>nrf_clock_lf_is_running</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_lf_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[1e1]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[60]"></a>sd_state_evt_handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[5c]"></a>soc_evt_handler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[207]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[8f]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[204]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[91]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[205]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[92]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[8e]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[8d]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[202]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[203]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[1ff]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[201]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[206]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[a1]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[20b]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[9e]"></a>nrf_saadc_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[208]"></a>nrf_saadc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>

<P><STRONG><a name="[209]"></a>nrf_saadc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>

<P><STRONG><a name="[a0]"></a>nrf_saadc_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>AddRoundKey</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, aes.o(i.AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[83]"></a>BlockCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aes.o(i.BlockCopy))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>

<P><STRONG><a name="[87]"></a>Cipher</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, aes.o(i.Cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
</UL>

<P><STRONG><a name="[85]"></a>InvCipher</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, aes.o(i.InvCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>

<P><STRONG><a name="[95]"></a>InvMixColumns</STRONG> (Thumb, 1208 bytes, Stack size 48 bytes, aes.o(i.InvMixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[93]"></a>InvShiftRows</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, aes.o(i.InvShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[94]"></a>InvSubBytes</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aes.o(i.InvSubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InvSubBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[84]"></a>KeyExpansion</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, aes.o(i.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>

<P><STRONG><a name="[8b]"></a>MixColumns</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, aes.o(i.MixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[8a]"></a>ShiftRows</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, aes.o(i.ShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[89]"></a>SubBytes</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aes.o(i.SubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SubBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[97]"></a>getSBoxInvert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.getSBoxInvert))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
</UL>

<P><STRONG><a name="[98]"></a>getSBoxValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes.o(i.getSBoxValue))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>

<P><STRONG><a name="[96]"></a>xtime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aes.o(i.xtime))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
</UL>

<P><STRONG><a name="[37]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = detection_delay_timeout_handler &rArr; nrf_drv_gpiote_in_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[36]"></a>gpiote_event_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[e2]"></a>next_index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_scheduler.o(i.next_index))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[eb]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[ed]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[242]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[ec]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[14c]"></a>compare_reg_update</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[23f]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[240]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1e3]"></a>list_insertions_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[14f]"></a>nrf_delay_us</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[14e]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[e8]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[ee]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[14d]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[ea]"></a>rtc1_stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[e6]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_diff_compute
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[23e]"></a>timeout_handler_exec</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timeout_handler_exec &rArr; app_sched_event_put &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[4d]"></a>timeout_handler_scheduled_exec</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_timer.o(i.timeout_handler_scheduled_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timeout_handler_scheduled_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.timeout_handler_exec)
</UL>
<P><STRONG><a name="[a2]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[241]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[1e5]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[1e4]"></a>timer_list_remove</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[ef]"></a>timer_start_op_schedule</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[f1]"></a>timer_stop_op_schedule</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[9d]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_sched_event_put &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[243]"></a>user_op_alloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[244]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[f3]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[f2]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[123]"></a>add_round_key</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cifra_eax_aes.o(i.add_round_key))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_encrypt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_decrypt
</UL>

<P><STRONG><a name="[d5]"></a>aes_schedule</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, cifra_eax_aes.o(i.aes_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_schedule &rArr; sub_word &rArr; select_u8x4 &rArr; mask_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_word
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read32_be
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_init
</UL>

<P><STRONG><a name="[1dd]"></a>gf_poly_mul2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cifra_eax_aes.o(i.gf_poly_mul2))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_column
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_column
</UL>

<P><STRONG><a name="[1dc]"></a>inv_mix_column</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cifra_eax_aes.o(i.inv_mix_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_mix_column
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr32
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf_poly_mul2
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_columns
</UL>

<P><STRONG><a name="[126]"></a>inv_mix_columns</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cifra_eax_aes.o(i.inv_mix_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_mix_columns &rArr; inv_mix_column
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_column
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_decrypt
</UL>

<P><STRONG><a name="[124]"></a>inv_shift_rows</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cifra_eax_aes.o(i.inv_shift_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_shift_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_decrypt
</UL>

<P><STRONG><a name="[125]"></a>inv_sub_block</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cifra_eax_aes.o(i.inv_sub_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = inv_sub_block &rArr; sub_word &rArr; select_u8x4 &rArr; mask_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_word
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_decrypt
</UL>

<P><STRONG><a name="[23c]"></a>mask_u8</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cifra_eax_aes.o(i.mask_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mask_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_u8x4
</UL>

<P><STRONG><a name="[1ea]"></a>mix_column</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cifra_eax_aes.o(i.mix_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mix_column
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr32
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf_poly_mul2
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_columns
</UL>

<P><STRONG><a name="[12a]"></a>mix_columns</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cifra_eax_aes.o(i.mix_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_columns &rArr; mix_column
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_column
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_encrypt
</UL>

<P><STRONG><a name="[d6]"></a>read32_be</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cifra_eax_aes.o(i.read32_be))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_encrypt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_decrypt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_schedule
</UL>

<P><STRONG><a name="[1de]"></a>rotr32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cifra_eax_aes.o(i.rotr32))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_column
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_column
</UL>

<P><STRONG><a name="[23b]"></a>select_u8x4</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, cifra_eax_aes.o(i.select_u8x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = select_u8x4 &rArr; mask_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_word
</UL>

<P><STRONG><a name="[129]"></a>shift_rows</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cifra_eax_aes.o(i.shift_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shift_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_encrypt
</UL>

<P><STRONG><a name="[128]"></a>sub_block</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cifra_eax_aes.o(i.sub_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sub_block &rArr; sub_word &rArr; select_u8x4 &rArr; mask_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_word
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_encrypt
</UL>

<P><STRONG><a name="[d7]"></a>sub_word</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, cifra_eax_aes.o(i.sub_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sub_word &rArr; select_u8x4 &rArr; mask_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_u8x4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_block
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sub_block
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_schedule
</UL>

<P><STRONG><a name="[127]"></a>write32_be</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cifra_eax_aes.o(i.write32_be))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_encrypt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_aes_decrypt
</UL>

<P><STRONG><a name="[3e]"></a>cmac_process</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, cmac.o(i.cmac_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmac_process &rArr; cf_cbc_encrypt &rArr; xor_bb
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cbc_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmac.o(i.cf_cmac_stream_update)
</UL>
<P><STRONG><a name="[14b]"></a>cmac_process_final</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, cmac.o(i.cmac_process_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cmac_process_final &rArr; cf_cbc_encrypt &rArr; xor_bb
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cbc_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_process_final_pad
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_process_final_nopad
</UL>

<P><STRONG><a name="[3f]"></a>cmac_process_final_nopad</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmac.o(i.cmac_process_final_nopad))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cmac_process_final_nopad &rArr; cmac_process_final &rArr; cf_cbc_encrypt &rArr; xor_bb
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_process_final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmac.o(i.cf_cmac_stream_update)
</UL>
<P><STRONG><a name="[40]"></a>cmac_process_final_pad</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmac.o(i.cmac_process_final_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cmac_process_final_pad &rArr; cmac_process_final &rArr; cf_cbc_encrypt &rArr; xor_bb
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_process_final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmac.o(i.cf_cmac_stream_update)
</UL>
<P><STRONG><a name="[134]"></a>mem_clean</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cmac.o(i.mem_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_clean
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_reset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_init
</UL>

<P><STRONG><a name="[140]"></a>cmac_compute_n</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, eax.o(i.cmac_compute_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_update
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_reset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cmac_stream_final
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_eax_encrypt
</UL>

<P><STRONG><a name="[c1]"></a>adv_restart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, es_adv.o(i.adv_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = adv_restart &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_non_connctable_adv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_on_ble_evt
</UL>

<P><STRONG><a name="[ca]"></a>adv_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, es_adv.o(i.adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adv_start &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_adv_cnt_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_adv_start
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_callback
</UL>

<P><STRONG><a name="[cc]"></a>adv_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, es_adv.o(i.adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adv_stop &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_connectable_adv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_on_ble_evt
</UL>

<P><STRONG><a name="[42]"></a>adv_timing_callback</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, es_adv.o(i.adv_timing_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = adv_timing_callback &rArr; es_adv_frame_fill_non_connectable_adv_data &rArr; es_slot_etlm_update &rArr; es_security_tlm_to_etlm &rArr; cf_eax_encrypt &rArr; cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_frame_fill_non_connectable_adv_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_callback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_params
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_adv.o(i.es_adv_init)
</UL>
<P><STRONG><a name="[c3]"></a>connectable_adv_start</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, es_adv.o(i.connectable_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_frame_fill_connectable_adv_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_callback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_params
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_connectable_adv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_restart
</UL>

<P><STRONG><a name="[d0]"></a>get_adv_params</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, es_adv.o(i.get_adv_params))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_adv_start
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_callback
</UL>

<P><STRONG><a name="[cf]"></a>invoke_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, es_adv.o(i.invoke_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = invoke_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectable_adv_start
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timing_callback
</UL>

<P><STRONG><a name="[166]"></a>fill_adv_data</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, es_adv_frame.o(i.fill_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_frame_fill_non_connectable_adv_data
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_frame_fill_connectable_adv_data
</UL>

<P><STRONG><a name="[43]"></a>adv_interval_timeout</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, es_adv_timing.o(i.adv_interval_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = adv_interval_timeout &rArr; adv_slot_timeout &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slot_timeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_adv_timing.o(i.es_adv_timing_timers_init)
</UL>
<P><STRONG><a name="[44]"></a>adv_slot_timeout</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, es_adv_timing.o(i.adv_slot_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = adv_slot_timeout &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlm_should_be_advertised
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_callback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_to_adv_is_tlm
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_interval_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_adv_timing.o(i.es_adv_timing_timers_init)
</UL>
<P><STRONG><a name="[d1]"></a>adv_timing_set</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, es_adv_timing.o(i.adv_timing_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = adv_timing_set &rArr; es_adv_timing_resolve &rArr; is_eid
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_resolve
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_start
</UL>

<P><STRONG><a name="[c4]"></a>frame_to_adv_is_tlm</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, es_adv_timing.o(i.frame_to_adv_is_tlm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = frame_to_adv_is_tlm
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slot_timeout
</UL>

<P><STRONG><a name="[c6]"></a>invoke_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, es_adv_timing.o(i.invoke_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = invoke_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slot_timeout
</UL>

<P><STRONG><a name="[c5]"></a>tlm_should_be_advertised</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, es_adv_timing.o(i.tlm_should_be_advertised))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_slot_timeout
</UL>

<P><STRONG><a name="[171]"></a>get_adv_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, es_adv_timing_resolver.o(i.get_adv_delay))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_resolve
</UL>

<P><STRONG><a name="[172]"></a>is_eid</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, es_adv_timing_resolver.o(i.is_eid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_eid
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_timing_resolve
</UL>

<P><STRONG><a name="[45]"></a>saadc_event_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, es_battery_voltage_saadc.o(i.saadc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = saadc_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_battery_voltage_saadc.o(i.es_battery_voltage_init)
</UL>
<P><STRONG><a name="[af]"></a>access_flash_data</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, es_flash.o(i.access_flash_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_delete
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_slot_configs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_lock_key
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_flags
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_beacon_config
</UL>

<P><STRONG><a name="[46]"></a>fds_cb</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, es_flash.o(i.fds_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_cb &rArr; app_sched_event_put &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_flash.o(i.es_flash_init)
</UL>
<P><STRONG><a name="[49]"></a>fds_gc_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, es_flash.o(i.fds_gc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fds_gc_event &rArr; fds_gc &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_flash.o(i.fds_cb)
</UL>
<P><STRONG><a name="[183]"></a>is_beacon_unlocked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_gatts.o(i.is_beacon_unlocked))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_handle_read
</UL>

<P><STRONG><a name="[18f]"></a>read_adv_slot</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, es_gatts_read.o(i.read_adv_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = read_adv_slot &rArr; es_slot_etlm_update &rArr; es_security_tlm_to_etlm &rArr; cf_eax_encrypt &rArr; cmac_compute_n &rArr; cf_cmac_stream_update &rArr; cf_blockwise_acc_pad &rArr; cf_blockwise_accumulate &rArr; cf_blockwise_accumulate_final
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_scaler_get
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_clock_get
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_read_reply
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_etlm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlocked_read
</UL>

<P><STRONG><a name="[18d]"></a>read_from_gattdb</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, es_gatts_read.o(i.read_from_gattdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = read_from_gattdb &rArr; read_value &rArr; send_read_reply &rArr; es_gatts_send_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_value
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlocked_read
</UL>

<P><STRONG><a name="[18a]"></a>read_value</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, es_gatts_read.o(i.read_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_value &rArr; send_read_reply &rArr; es_gatts_send_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_read_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_gattdb
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlocked_read
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_unlock
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_read_handle_locked_read
</UL>

<P><STRONG><a name="[22e]"></a>send_read_reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, es_gatts_read.o(i.send_read_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_read_reply &rArr; es_gatts_send_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_send_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_value
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adv_slot
</UL>

<P><STRONG><a name="[196]"></a>length_is_valid</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, es_gatts_write.o(i.length_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
</UL>

<P><STRONG><a name="[192]"></a>send_write_reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, es_gatts_write.o(i.send_write_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_write_reply &rArr; es_gatts_send_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_send_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlocked_write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_gatts_write_handle_unlock
</UL>

<P><STRONG><a name="[147]"></a>check_rollovers_and_update_eid</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, es_security.o(i.check_rollovers_and_update_eid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_rollovers_and_update_eid &rArr; temp_key_generate &rArr; AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_key_generate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eid_generate
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_update_time
</UL>

<P><STRONG><a name="[149]"></a>eid_generate</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, es_security.o(i.eid_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eid_generate &rArr; AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rollovers_and_update_eid
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_shared_ik_receive
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_eid_slots_restore
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
</UL>

<P><STRONG><a name="[17a]"></a>es_beacon_ecdh_pair_generate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, es_security.o(i.es_beacon_ecdh_pair_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + Unknown Stack Size
<LI>Call Chain = es_beacon_ecdh_pair_generate &rArr; occ_curve25519_scalarmult_base &rArr; occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_curve25519_scalarmult_base
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
</UL>

<P><STRONG><a name="[19d]"></a>lock_code_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, es_security.o(i.lock_code_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lock_code_init &rArr; es_flash_access_lock_key &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_lock_key
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_init
</UL>

<P><STRONG><a name="[148]"></a>temp_key_generate</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, es_security.o(i.temp_key_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = temp_key_generate &rArr; AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rollovers_and_update_eid
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_shared_ik_receive
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_eid_slots_restore
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
</UL>

<P><STRONG><a name="[151]"></a>configure_eid_slot</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, es_slot.o(i.configure_eid_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240 + Unknown Stack Size
<LI>Call Chain = configure_eid_slot &rArr; es_security_client_pub_ecdh_receive &rArr; es_beacon_ecdh_pair_generate &rArr; occ_curve25519_scalarmult_base &rArr; occ_curve25519_scalarmult &rArr; occ_mod25519_power &rArr; exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_clear_slot
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_shared_ik_receive
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_eid_slot_destroy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_client_pub_ecdh_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_on_write
</UL>

<P><STRONG><a name="[156]"></a>configure_slot</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, es_slot.o(i.configure_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = configure_slot &rArr; set_ranging_data_for_slot &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_update_slot_list_info_on_add
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ranging_data_for_slot
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_on_write
</UL>

<P><STRONG><a name="[1ae]"></a>load_slot_from_flash</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, es_slot.o(i.load_slot_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = load_slot_from_flash &rArr; es_flash_access_slot_configs &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_slot_configs
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_update_slot_list_info_on_add
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_eid_slots_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slots_init
</UL>

<P><STRONG><a name="[158]"></a>set_ranging_data_for_slot</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, es_slot.o(i.set_ranging_data_for_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_ranging_data_for_slot &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_set_adv_custom_tx_power
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_radio_tx_pwr_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_eid_ready
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_slot
</UL>

<P><STRONG><a name="[1a6]"></a>slot_boundary_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, es_slot.o(i.slot_boundary_check))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_set_adv_custom_tx_power
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_radio_tx_pwr_set
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_on_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_encrypted_eid_id_key_set
</UL>

<P><STRONG><a name="[1a8]"></a>slot_is_eid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, es_slot.o(i.slot_is_eid))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_etlm_update
</UL>

<P><STRONG><a name="[15a]"></a>configured_slots_on_clear_update</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, es_slot_reg.o(i.configured_slots_on_clear_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = configured_slots_on_clear_update
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_clear_slot
</UL>

<P><STRONG><a name="[1a9]"></a>update_tlm_configured_on_clearing</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, es_slot_reg.o(i.update_tlm_configured_on_clearing))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_reg_clear_slot
</UL>

<P><STRONG><a name="[1b2]"></a>update_adv_cnt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, es_tlm.o(i.update_adv_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
</UL>

<P><STRONG><a name="[1b1]"></a>update_temp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, es_tlm.o(i.update_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_temp
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
</UL>

<P><STRONG><a name="[1af]"></a>update_time</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, es_tlm.o(i.update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = update_time &rArr; es_stopwatch_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_stopwatch_check
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
</UL>

<P><STRONG><a name="[1b0]"></a>update_vbatt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, es_tlm.o(i.update_vbatt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_vbatt &rArr; es_battery_voltage_get &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_battery_voltage_get
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_tlm_tlm_get
</UL>

<P><STRONG><a name="[b7]"></a>address_is_valid</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fds.o(i.address_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = address_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[160]"></a>delete_execute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[22b]"></a>event_prepare</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, fds.o(i.event_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1b8]"></a>event_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[162]"></a>file_find_and_delete</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fds.o(i.file_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = file_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[1bd]"></a>flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[1b4]"></a>flag_is_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.flag_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_delete
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[1b9]"></a>flag_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[1ba]"></a>flash_bounds_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.flash_bounds_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_bounds_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_end_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[1c2]"></a>flash_end_addr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(i.flash_end_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bounds_set
</UL>

<P><STRONG><a name="[2]"></a>fs_event_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[1c8]"></a>gc_execute</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1d5]"></a>gc_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fds.o(i.gc_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[1ca]"></a>gc_next_page</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1cd]"></a>gc_page_erase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gc_page_erase &rArr; gc_swap_erase &rArr; nrf_fstorage_erase &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1d0]"></a>gc_page_next</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fds.o(i.gc_page_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>

<P><STRONG><a name="[1cc]"></a>gc_record_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1cb]"></a>gc_record_find_next</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1c9]"></a>gc_state_advance</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_state_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_update_swap_offset
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1d2]"></a>gc_swap_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_swap_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gc_swap_erase &rArr; nrf_fstorage_erase &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[1d7]"></a>gc_swap_pages</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[1ce]"></a>gc_swap_promote</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.gc_swap_promote))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gc_swap_promote &rArr; page_tag_write_data &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1cf]"></a>gc_tag_new_swap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fds.o(i.gc_tag_new_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gc_tag_new_swap &rArr; page_tag_write_swap &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1d6]"></a>gc_update_swap_offset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.gc_update_swap_offset))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[226]"></a>header_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fds.o(i.header_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[1db]"></a>init_execute</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_execute &rArr; page_tag_write_data &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[b8]"></a>is_word_aligned</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>

<P><STRONG><a name="[1b5]"></a>op_enqueue</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fds.o(i.op_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = op_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_delete
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[230]"></a>page_from_record</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fds.o(i.page_from_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = page_from_record
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[24a]"></a>page_has_space</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fds.o(i.page_has_space))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
</UL>

<P><STRONG><a name="[227]"></a>page_identify</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[228]"></a>page_is_erased</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fds.o(i.page_is_erased))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[249]"></a>page_offsets_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[225]"></a>page_scan</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[1d8]"></a>page_tag_write_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
</UL>

<P><STRONG><a name="[1d9]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
</UL>

<P><STRONG><a name="[1bc]"></a>pages_init</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_is_erased
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[229]"></a>queue_advance</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fds.o(i.queue_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1c3]"></a>queue_process</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[1b6]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_delete
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1bf]"></a>record_find</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[161]"></a>record_find_and_delete</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fds.o(i.record_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[1be]"></a>record_find_by_desc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_from_record
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
</UL>

<P><STRONG><a name="[1d4]"></a>record_find_next</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[1c1]"></a>record_header_flag_dirty</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[231]"></a>record_header_write_begin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fds.o(i.record_header_write_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = record_header_write_begin &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[232]"></a>record_header_write_finalize</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = record_header_write_finalize &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[233]"></a>record_header_write_id</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = record_header_write_id &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[247]"></a>record_id_new</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.record_id_new))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[237]"></a>record_write_data</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fds.o(i.record_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = record_write_data &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[1c0]"></a>write_enqueue</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_id_new
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[22a]"></a>write_execute</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_execute &rArr; record_write_data &rArr; nrf_fstorage_write &rArr; addr_within_bounds
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[248]"></a>write_space_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.write_space_free))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[246]"></a>write_space_reserve</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_has_space
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[142]"></a>read32_be</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gf128.o(i.read32_be))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_gf128_frombytes_be
</UL>

<P><STRONG><a name="[141]"></a>select_u8</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gf128.o(i.select_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = select_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_gf128_double
</UL>

<P><STRONG><a name="[143]"></a>write32_be</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gf128.o(i.write32_be))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_gf128_tobytes_be
</UL>

<P><STRONG><a name="[41]"></a>ctr_next_block</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, modes.o(i.ctr_next_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ctr_next_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(i.cf_ctr_cipher)
</UL>
<P><STRONG><a name="[131]"></a>xor_bb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, modes.o(i.xor_bb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xor_bb
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf_cbc_encrypt
</UL>

<P><STRONG><a name="[35]"></a>adv_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_ble_es.o(i.adv_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adv_evt_handler &rArr; es_security_update_time &rArr; check_rollovers_and_update_eid &rArr; temp_key_generate &rArr; AES128_ECB_encrypt &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_update_time
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_ble_es.o(i.adv_init)
</UL>
<P><STRONG><a name="[bb]"></a>adv_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_ble_es.o(i.adv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = adv_init &rArr; es_flash_access_beacon_config &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_beacon_config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[c7]"></a>adv_slots_init</STRONG> (Thumb, 48 bytes, Stack size 88 bytes, nrf_ble_es.o(i.adv_slots_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = adv_slots_init &rArr; es_slots_init &rArr; load_slot_from_flash &rArr; es_flash_access_slot_configs &rArr; access_flash_data &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slots_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[103]"></a>ble_escs_init</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, nrf_ble_es.o(i.ble_escs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ble_escs_init &rArr; nrf_ble_escs_init &rArr; char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_init
</UL>

<P><STRONG><a name="[145]"></a>check_and_update_mac_address</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_ble_es.o(i.check_and_update_mac_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = check_and_update_mac_address &rArr; new_address_set &rArr; es_adv_start_connectable_adv &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_escs_security_cb
</UL>

<P><STRONG><a name="[b9]"></a>handle_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_ble_es.o(i.handle_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handle_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_evt_handler
</UL>

<P><STRONG><a name="[21d]"></a>lock_beacon</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_ble_es.o(i.lock_beacon))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[146]"></a>new_address_set</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrf_ble_es.o(i.new_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = new_address_set &rArr; es_adv_start_connectable_adv &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_non_connctable_adv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_start_connectable_adv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_remain_connectable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_mac_address
</UL>

<P><STRONG><a name="[4b]"></a>nrf_ble_escs_security_cb</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, nrf_ble_es.o(i.nrf_ble_escs_security_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nrf_ble_escs_security_cb &rArr; check_and_update_mac_address &rArr; new_address_set &rArr; es_adv_start_connectable_adv &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_write_to_flash
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_encrypted_eid_id_key_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_eid_ready
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_pub_ecdh_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_security_encrypted_eid_id_key_get
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_mac_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_ble_es.o(i.nrf_ble_es_init)
</UL>
<P><STRONG><a name="[1f0]"></a>on_ble_evt</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, nrf_ble_es.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = on_ble_evt &rArr; check_and_update_mac_address &rArr; new_address_set &rArr; es_adv_start_connectable_adv &rArr; connectable_adv_start &rArr; es_adv_frame_fill_connectable_adv_data &rArr; fill_adv_data &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_flags
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_flash_access_beacon_config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_get_registry
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_remain_connectable_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_adv_interval_get
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;es_slot_write_to_flash
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_beacon
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_mac_address
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_es_on_ble_evt
</UL>

<P><STRONG><a name="[212]"></a>addr_is_aligned32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[20c]"></a>addr_within_bounds</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_fstorage.o(i.addr_within_bounds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[53]"></a>erase</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[22d]"></a>erase_execute</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1b3]"></a>event_send</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[4f]"></a>init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>is_busy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[20f]"></a>on_operation_failure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_failure))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[20e]"></a>on_operation_success</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_success))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[210]"></a>queue_advance</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.queue_advance))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[164]"></a>queue_get_next_free</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.queue_get_next_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_get_next_free
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[20d]"></a>queue_process</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[165]"></a>queue_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[51]"></a>read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>uninit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.uninit))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>write</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>write_execute</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[21c]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[23a]"></a>sdk_mapped_flags_get_by_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>

<P><STRONG><a name="[239]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
</UL>

<P><STRONG><a name="[21b]"></a>nrf_section_iter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_section_iter_get))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[219]"></a>sd_nvic_DisableIRQ</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_sdh.o(i.sd_nvic_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[21a]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, nrf_sdh.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[217]"></a>sdh_request_observer_notify</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[218]"></a>sdh_state_observer_notify</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[5e]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[5f]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[ac]"></a>errata_108</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a4]"></a>errata_12</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_12))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ad]"></a>errata_136</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a5]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a6]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a7]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a8]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a9]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[aa]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ab]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7a]"></a>occ_hmac_sha256_num</STRONG> (Thumb, 176 bytes, Stack size 768 bytes, occ_lib_occ_hkdf_sha256.c.o(.text.occ_hmac_sha256_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = occ_hmac_sha256_num &rArr; occ_sha256_final &rArr; sha256_blocks &rArr; occ_sha256_loop1
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_sha256_final
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_sha256_update
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_hmac_sha256
</UL>

<P><STRONG><a name="[6d]"></a>exp_power_of_2</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, occ_lib_occ_mod25519.c.o(.text.exp_power_of_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = exp_power_of_2
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_square
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_mod25519_power
</UL>

<P><STRONG><a name="[7f]"></a>sha256_blocks</STRONG> (Thumb, 192 bytes, Stack size 512 bytes, occ_lib_occ_sha256.c.o(.text.sha256_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = sha256_blocks &rArr; occ_sha256_loop1
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_sha256_loop2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_sha256_loop1
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_sha256_final
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_sha256_update
</UL>

<P><STRONG><a name="[65]"></a>cswap64</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, occ_lib_occ_bigint256.s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;occ_bigint_cswap256
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
